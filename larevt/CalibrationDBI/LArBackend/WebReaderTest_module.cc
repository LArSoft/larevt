////////////////////////////////////////////////////////////////////////
// Class:       WebReaderTest
// Module Type: analyzer
// File:        WebReaderTest_module.cc
//
// Generated at Wed Feb 11 07:17:16 2015 by Kazuhiro Terao using artmod
// from cetpkgsupport v1_08_02.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art_root_io/TFileDirectory.h"
#include "art_root_io/TFileService.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

// CalibrationDBI
#include "WebReaderService.h"

// ROOT
#include "TAxis.h"
#include "TCanvas.h"
#include "TGraph.h"

class WebReaderTest;

class WebReaderTest : public art::EDAnalyzer {
public:
  explicit WebReaderTest(fhicl::ParameterSet const& p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  WebReaderTest(WebReaderTest const&) = delete;
  WebReaderTest(WebReaderTest&&) = delete;
  WebReaderTest& operator=(WebReaderTest const&) = delete;
  WebReaderTest& operator=(WebReaderTest&&) = delete;

  // Required functions.
  void analyze(art::Event const& e) override;

private:
  TGraph* gPed;
};

WebReaderTest::WebReaderTest(fhicl::ParameterSet const& p) : EDAnalyzer(p), gPed(nullptr) {}

void WebReaderTest::analyze(art::Event const& e)
{
  // Do it only once in the lifetime
  if (!gPed) {

    // Let's retrieve ch==0 parameter "mean" from "kazu_pedestal"
    const std::string folder("kazu_pedestal");
    const unsigned int ch = 0;
    const std::string param("mean");
    int param_index = -1;

    // We sample over 100 time stamps, store values (time & mean value) in vector containers
    const size_t npoints = 100;
    std::vector<double> xarray, yarray;
    xarray.reserve(npoints);
    yarray.reserve(npoints);
    double ymax = std::numeric_limits<double>::min();
    double ymin = std::numeric_limits<double>::max();

    // Loop over known time range in which data exists
    TTimeStamp start(2015, 2, 6, 0, 0, 1, 0, false);
    TTimeStamp end(2015, 2, 6, 1, 0, 1, 0, false);
    TTimeStamp now(start);

    // Now create DBI instance and loop over sampling points
    art::ServiceHandle<lariov::WebReaderService const> db_handle;
    auto& db = db_handle->GetWebReader<double>();

    int period = (int)((end.GetSec() - start.GetSec()) / (double)(npoints));
    for (size_t i = 0; i < npoints; ++i) {

      // Set time for "now"
      now.SetSec(now.GetSec() + period);

      // Request Snapshot for "now"
      auto snapshot = db.Request(folder, now);

      // Retrieve a specific channel data
      auto ch_data = snapshot.ChData(ch);

      // If param_index is unset, figure out (only once) for fast index access
      if (param_index < 0) param_index = snapshot.Name2Index(param);

      // Retrieve a mean value
      auto val = ch_data[param_index];

      // Record
      xarray.push_back(now.GetSec());
      yarray.push_back(val);

      // Record min/max for plotting purpose
      if (val > ymax) ymax = val;
      if (val < ymin) ymin = val;
    }

    // Decorate min/max
    ymax *= 1.2;
    ymin *= 1.2;
    if (!ymax && !ymin) {
      ymax = 1;
      ymin = -1;
    }

    // Plot in TGraph
    // Store in a histogram
    art::ServiceHandle<art::TFileService const> fs;
    gPed = fs->make<TGraph>(npoints, &xarray[0], &yarray[0]);
    gPed->SetName("gPed");
    gPed->SetTitle("Pedestal Mean Value Over Time; ;Pedestal Mean");
    gPed->GetXaxis()->SetTimeDisplay(1);
    gPed->GetXaxis()->SetNdivisions(-503);
    gPed->GetXaxis()->SetTimeFormat("%Y-%m-%d %H:%M");
    gPed->GetXaxis()->SetTimeOffset(0, "gmt");
    gPed->GetXaxis()->SetRangeUser(start.GetSec(), end.GetSec());
    gPed->SetMarkerStyle(22);
    gPed->SetMarkerSize(1);
    gPed->SetMaximum(ymax);
    gPed->SetMinimum(ymin);

    TCanvas c("c", "", 600, 500);
    gPed->Draw("APL");
    c.SaveAs("gPed.gif");
  }
}

DEFINE_ART_MODULE(WebReaderTest)
